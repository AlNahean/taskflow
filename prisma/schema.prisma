// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Task {
    id          String       @id @default(uuid())
    title       String
    description String?
    status      TaskStatus   @default(todo)
    priority    TaskPriority @default(medium)
    category    TaskCategory @default(personal)
    startDate   DateTime     @default(now())
    dueDate     DateTime
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    starred     Boolean      @default(false)

    suggestedTaskId String?        @unique
    suggestion      SuggestedTask? @relation(fields: [suggestedTaskId], references: [id])

    subtasks SubTask[] // Relation to SubTasks
}

enum TaskStatus {
    todo
    in_progress
    completed
    overdue
}

enum TaskPriority {
    low
    medium
    high
}

enum TaskCategory {
    work
    personal
    shopping
    health
    other
}

model Note {
    id             String          @id @default(uuid())
    title          String
    content        String?
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    suggestedTasks SuggestedTask[]
}

model SuggestedTask {
    id          String       @id @default(uuid())
    title       String
    description String?
    status      TaskStatus   @default(todo)
    priority    TaskPriority @default(medium)
    category    TaskCategory @default(personal)
    startDate   DateTime?
    dueDate     DateTime?
    isAdded     Boolean      @default(false)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    subtasks    Json? // Store suggested subtasks as JSON

    noteId String
    note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)

    createdTask Task?

    @@index([noteId])
}

model SubTask {
    id        String   @id @default(uuid())
    text      String
    completed Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    taskId String
    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

    @@index([taskId])
}
